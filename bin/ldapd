#!/usr/bin/env ruby
#
# bin/ldapd - daemonization logic
#
# Florian Dejonckheere <florian@floriandejonckheere.be>
#

require 'logger'

ENV['RAILS_ENV'] ||= 'development'
root = File.expand_path(File.dirname(__FILE__))
root = File.dirname(root) until File.exists?(File.join(root, 'config'))

$pid_file = File.join(root, 'tmp', 'pids', 'ldapd.pid')
$log_file = File.join(root, 'log', "ldapd.#{ENV['RAILS_ENV']}.log")
if ENV['LOG_LEVEL']
  $log_level = ENV['LOG_LEVEL'].constantize
else
  $log_level = ENV['RAILS_ENV'] == 'development' ? Logger::DEBUG : Logger::INFO
end



### HELPER METHODS ###
def create_server
  # Load Rails environment
  root = File.expand_path(File.dirname(__FILE__))
  root = File.dirname(root) until File.exists?(File.join(root, 'config'))
  Dir.chdir(root)
  require File.join(root, 'config', 'environment')
  require File.join(root, 'lib', 'ldapd.rb')

  server = LDAPd::Server.new(
    :log_file => $log_file,
    :log_level => $log_level,
    :pid_file => $pid_file
  )
end



### SERVER CONTROL ###
# returns 0 on success, 1 otherwise
def start_server(daemonize = :foreground)
  if File.file? $pid_file
    begin
      pid = Integer(File.read $pid_file)
      Process.getpgid pid # raises Errno::ESRCH
      abort "Instance with PID #{pid} already running!"
    rescue Errno::ESRCH
      File.delete $pid_file
      puts "Removing stale PID file"
    end
  end

  puts "Starting LDAPd in #{daemonize.to_s}..."
  $log_file = STDOUT if daemonize == :foreground
  create_server.start daemonize
end

# returns 0 on success, 1 otherwise
def stop_server
  abort "No ldapd instance running" unless File.file? $pid_file

  begin
    pid = Integer(File.read $pid_file)
    Process.getpgid pid # raises Errno::ESRCH
    puts "Stopping ldapd instance with PID #{pid}..."
    Process.kill 'INT', pid
  rescue Errno::ESRCH
    File.delete $pid_file
    puts "Removing stale PID file"
    exit 1
  end

  (0..9).each do
    begin
      Process.getpgid pid
      sleep 1
      next
    rescue Errno::ESRCH
      return
    end
    abort "Instance still found running after 10 seconds"
  end
end

# returns 0 on instance running, 1 otherwise
def server_status
  if File.file? $pid_file
    begin
      raise Errno::ESRCH if File.zero? $pid_file

      pid = Integer(File.read $pid_file)
      Process.getpgid pid # raises Errno:ESRCH
      puts "ldapd instance running with PID #{pid}"
      exit 0
    rescue Errno::ESRCH
      File.delete $pid_file
      puts "Removing stale PID file"
    end
  end
  abort "No ldapd instances running"
end



### MAIN METHOD ###
case ARGV.first
when 'run'
  start_server :foreground
when 'start'
  start_server :background
when 'stop'
  stop_server
when 'status'
  server_status
else
  puts "#{__FILE__} help | run | start | stop | restart | status"
  puts "  help      this help message"
  puts "  run       start the server in foreground"
  puts "  start     start the server in background"
  puts "  stop      stop the server"
  puts "  restart   restart the server (in background)"
  puts "  status    query server status"
end
